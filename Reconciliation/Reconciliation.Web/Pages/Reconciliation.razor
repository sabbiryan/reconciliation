@page "/reconciliation"

@using ReconciliationApp.Web.Data
@using ReconciliationApp.Service.Reconciliations.Dtos


@inject IModalService Modal
@inject ReconciliationService ReconciliationService

<h4>
    Reconciliations

    <button @onclick="(() => ShowModal())" class="btn btn-primary float-right">Create A New Reconciliation</button>

</h4>

<p>All reconciliations.</p>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Month</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Flag</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.MonthDisplayText</td>
                    <td>@item.Amount</td>
                    <td>@item?.IncomeOrExpenseType?.DisplayName</td>
                    <td>@item?.IncomeOrExpenseType?.FlagDisplayText</td>
                    <td>
                        <a href="javascript:void(0)" @onclick="(() => ShowModal(item.Id))">Edit</a>
                        <a href="javascript:void(0)" @onclick="(() => Delete(item.Id))">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ReconciliationListDto[] items;

    protected override async Task OnInitializedAsync()
    {
        items = await ReconciliationService.GetListAsync();
    }


    async Task ShowModal(string id = null)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ReconciliationFormDto.Id), id);

        var formModal = Modal.Show<ReconciliationForm>(id == null ? "Create a new reconciliation" : "Edit reconciliation", parameters);
        var result = await formModal.Result;

        if (result.Cancelled)
        {

        }
        else
        {
            await OnInitializedAsync();
        }
    }

    async Task Delete(string id)
    {
        //await Swal.FireAsync(new SweetAlertOptions
        //{
        //    Title = "Are you sure?",
        //    Text = "You will not be able to recover this imaginary file!",
        //    Type = SweetAlertType.Warning,
        //    ShowCancelButton = true,
        //    ConfirmButtonText = "Yes, delete it!",
        //    CancelButtonText = "No, keep it"
        //}).ContinueWith(swalTask =>
        //{
        //    SweetAlertResult result = swalTask.Result;
        //    if (!string.IsNullOrEmpty(result.Value))
        //    {
        //        Swal.FireAsync(
        //    "Deleted",
        //    "Your imaginary file has been deleted.",
        //    SweetAlertType.Success
        //    );
        //    }
        //    else if (result.Dismiss == DismissReason.Cancel)
        //    {
        //        Swal.FireAsync(
        //    "Cancelled",
        //    "Your imaginary file is safe :)",
        //    SweetAlertType.Error
        //    );
        //    }
        //});
    }
}
