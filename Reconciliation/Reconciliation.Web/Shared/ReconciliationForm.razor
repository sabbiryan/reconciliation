@using ReconciliationApp.Blazor.Data
@using ReconciliationApp.Service.IncomeOrExpenseTypes.Dtos
@using ReconciliationApp.Service.Reconciliations.Dtos;
@using ReconciliationApp.EntityFrameworkCore.Reconciliations
@using ReconciliationApp.Shared.Dtos
@using ReconciliationApp.Blazor.FormTags

@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IncomeOrExpenseTypeService IncomeOrExpenseTypeService
@inject ReconciliationService ReconciliationService

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <InputSelectNumber class="form-control" @bind-Value="model.Month">
            <option value="0">Please select a month ...</option>
            @if (months != null)
            {
                @foreach (var month in months)
                 {
                     <option value="@month.Id">@month.DisplayText</option>
                 }
            }
        </InputSelectNumber>
    </div>

    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="model.IncomeOrExpenseTypeId">
            <option value="">Please select a type ...</option>
            @if (types != null)
            {
                @foreach (var type in types)
                {
                    <option value="@type.Id">@type.DisplayName</option>
                }
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <InputNumber class="form-control" id="amount" @bind-Value="model.Amount" />
    </div>

    <div class="form-group float-right">
        <button @onclick="Cancel" class="btn btn-outline-secondary" type="button">Cancel</button>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>
</EditForm>


@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public string Id { get; set; }


    private ReconciliationFormDto model = new ReconciliationFormDto();


    private async Task HandleValidSubmit()
    {
        if (Id != null)
        {
            await ReconciliationService.EditAsync(model);
            Toaster.Success("Edited successfully");
        }
        else
        {
            await ReconciliationService.CreateAsync(model);
            Toaster.Success("Created successfully");
        }

        Close();
    }

    void Close() => BlazoredModal.Close(ModalResult.Ok(true));
    void Cancel() => BlazoredModal.Cancel();




    private IncomeOrExpenseTypeListDto[] types;
    private List<ComboBoxItemDto<int>> months;

    protected override async Task OnInitializedAsync()
    {
        months = ReconciliationService.GetMonths();

        types = await IncomeOrExpenseTypeService.GetListAsync();

        if (Id != null)
        {
            model = await ReconciliationService.GetForEditAsync(Id);
        }
    }




}